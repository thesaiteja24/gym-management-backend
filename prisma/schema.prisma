generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  systemAdmin
  gymAdmin
  trainer
  member
}

enum ExerciseType {
  repsOnly
  assisted
  weighted
}

model User {
  id            String    @id @default(uuid())
  countryCode   String?
  phone         String    @unique
  phoneE164     String?   @unique
  firstName     String?
  lastName      String?
  dateOfBirth   DateTime?
  height        Decimal?  @db.Decimal(6, 2)
  weight        Decimal?  @db.Decimal(6, 2)
  profilePicUrl String?
  role          UserRole  @default(member)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  gymsOwned   Gym[]        @relation("GymOwner")
  workoutLogs WorkoutLog[]
  sessions    Session[]
  memberships Membership[]

  @@index([countryCode])
  @@index([phone])
  @@index([phoneE164])
  @@index([role])
}

model Gym {
  id          String   @id @default(uuid())
  name        String
  ownerId     String
  owner       User     @relation("GymOwner", fields: [ownerId], references: [id])
  description String?
  timings     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships Membership[]
}

model WorkoutLog {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  title     String?
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  exercises WorkoutLogExercise[]
}

model WorkoutLogExercise {
  id            String     @id @default(uuid())
  workoutId     String
  workout       WorkoutLog @relation(fields: [workoutId], references: [id])
  exerciseId    String
  exercise      Exercise   @relation(fields: [exerciseId], references: [id])
  exerciseIndex Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  sets WorkoutLogExerciseSet[]

  @@index([workoutId])
  @@index([exerciseId])
}

model Exercise {
  id                   String       @id @default(uuid())
  title                String
  instructions         String?
  thumbnailUrl         String?
  videoUrl             String?
  primaryMuscleGroupId String?
  primaryMuscleGroup   MuscleGroup? @relation("PrimaryMuscleGroup", fields: [primaryMuscleGroupId], references: [id])
  equipmentId          String?
  equipment            Equipment?   @relation(fields: [equipmentId], references: [id])
  exerciseType         ExerciseType @default(repsOnly)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  otherMuscleGroups   ExerciseMuscleGroup[]
  workoutLogExercises WorkoutLogExercise[]
}

model WorkoutLogExerciseSet {
  id                String             @id @default(uuid())
  workoutExerciseId String
  workoutExercise   WorkoutLogExercise @relation(fields: [workoutExerciseId], references: [id])
  setIndex          Int?
  weight            Decimal?           @db.Decimal(8, 3)
  reps              Int?
  rpe               Int?
  durationSeconds   Int?
  note              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([workoutExerciseId])
}

model Equipment {
  id           String   @id @default(uuid())
  title        String
  thumbnailUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  exercises Exercise[]
}

model MuscleGroup {
  id           String   @id @default(uuid())
  title        String
  thumbnailUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  primaryExercises Exercise[]            @relation("PrimaryMuscleGroup")
  exercises        ExerciseMuscleGroup[]
}

model ExerciseMuscleGroup {
  id            String      @id @default(uuid())
  exerciseId    String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  muscleGroupId String
  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id])

  @@unique([exerciseId, muscleGroupId])
  @@index([muscleGroupId])
}

model Membership {
  id             String   @id @default(uuid())
  gymId          String
  gym            Gym      @relation(fields: [gymId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  membershipType String?
  joinedAt       DateTime @default(now())
  status         String   @default("active")

  @@unique([gymId, userId])
  @@index([gymId])
  @@index([userId])
}

model Session {
  id               String    @id @default(uuid())
  userId           String
  jwtId            String?
  refreshTokenHash String
  deviceId         String?
  ipAddress        String?
  userAgent        String?
  expiresAt        DateTime
  lastUsed         DateTime?
  createdAt        DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}
